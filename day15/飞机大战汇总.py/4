# 使用pygame  我们要先导入这个包

import pygame
from plane_sprites import *

class PlaneGame(object):
    '''飞机大战主游戏'''
    def __init__(self):
        print('游戏初始化')
        #创建游戏窗口  pygame.display.set_mode  创建游戏窗口  需要传宽和高
        #.size 取宽高    x取x轴的值   y取y轴的值
        self.screen = pygame.display.set_mode((SCREEN_RECT.size))
        #创建游戏时钟  pygame.time,Clock() 会给我们返回一个时钟对象
        self.clock = pygame.time.Clock()
        #创建私有方法  里面的创建精灵和精灵组
        self.__create_sprites()
    def start_game(self):
        print('开始游戏')
        while True:
            # 设置帧率
            self.clock.tick(60)
            # 事件监听
            self.__event_handler()
            # 碰撞检测、
            self.__check_collide()
            # 更新精灵组
            self.__update_sprites()
            # 更新屏幕显示
            pygame.display.update()
    def __create_sprites(self):
        '''创建精灵和精灵组'''
        pass
    def __event_handler(self):
        '''事件监听的方法'''
       # pygame.event.get()获取监听事件的列表
       # 获取完列表之后 写了一个for循环  循环这个列表

       for event in pygame.event.get():
            #当列表里面pygame.
            if event.type == pygame.QUIT:
                PlaneGame.__game_over()

       # if event.type == pygame.QUIT:
    def __check_collide(self):
        '''碰撞检测'''
        pass
    def __update_sprites(self):
        '''更新精灵组'''
        pass
    #静态方法
    @staticmethod
    def __game_over():
        '''游戏结束'''
        print('游戏结束')
        pygame.quit()
        exit()
        pass
        

#一般情况下  比如有一个场景   测试
if __name__ == '__main__':
    '''创建游戏对象'''
    game = PlaneGame()
    '''调用开始游戏的方法'''
    game.start_game()
